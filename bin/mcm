#!/usr/bin/env python3

import sys
import datetime
import mediacloud
import os
import json
import gzip
import logging

from json import JSONEncoder
from datetime import date, datetime, timedelta

# Give an idea of how long we have to go

from progressbar import ProgressBar, Percentage, Bar, AdaptiveETA

gLogger = logging.getLogger(__file__)
gLogger.setLevel(logging.WARNING)

# Constant definitions

MC_API_KEY = '6f503c700b907b45dd7e0106dd39c3cfe2af11d7f69547341ddc844de7f55e7d'
TOPICS = [
    'cats',
    'pruitt',
    'skripal'
]
COLLECTIONS = {
    'center': 9360522,
    'left': 9360520,
    'center-left': 9360521,
    'center-right': 9360523,
    'right': 9360524
}
BIAS_VALUE = {
    'left': -2,
    'center-left': -1,
    'center': 0,
    'center-right': 1,
    'right': 2
}
BIAS_ABBREV = {
    'l': 'left',
    'r': 'right',
    'cl': 'center-left',
    'cr': 'center-right',
    'r': 'right'
}
    
# Classes

class WordMatrix(JSONEncoder):
    """ Word list + word matrix + stories """
    def __init__(self, mc=None, wm=None, notes={}, **args):
        super().__init__(**args)

        self._mc = mc

        if wm is None:
            self._wm = {'word_list': [], 'word_matrix': {}}
            self._story_list = []
            self._story_dict = {}
        else:
            self._wm = wm
            self._story_list = [{**mc.story(x), **notes} for x in wm['word_matrix'].keys()]
            self._story_dict = {story['stories_id']: story for story in self._story_list}

    def default(self, o):
        return {
            'stories': o._story_list,
            'word_list': o._wm['word_list'],
            'word_matrix': o._wm['word_matrix']
        }

    def __add__(self, other):
        new_wm = WordMatrix(self._mc)

        if self._wm is None:
            new_wm._wm = other._wm
            new_wm._story_list = other._story_list
            new_wm._story_dict = other._story_dict
            return new_wm

        words = {}
        id_dict = {}
        pairs = {}

        # Merge the two word lists

        for n, pair in enumerate(self._wm['word_list']):
            stem, word = pair
            words[stem] = n

        count = len(words)

        for n, pair in enumerate(other._wm['word_list']):
            stem, word = pair

            if stem in words:
                idx = n
                id_dict[str(n)] = str(words[stem])
            else:
                count += 1
                idx = count
                words[stem] = idx
                id_dict[str(n)] = str(idx)

            pairs[idx] = pair

        new_wm._story_list = self._story_list + other._story_list
        new_wm._story_dict = {**self._story_dict, **other._story_dict}

        new_wm._wm['word_list'] = [v for k, v in sorted(pairs.items())]

        wm = {**self._wm['word_matrix']}

        for story_id, wm_dict in other._wm['word_matrix'].items():
            count_dict = {id_dict[word_id]: count for word_id, count in wm_dict.items()}
            wm[story_id] = count_dict

        new_wm._wm['word_matrix'] = wm

        return new_wm


def fetch_word_matrix(mc, topics, keys, rows, language='en'):
    result_list = []
    now = datetime.now()
    today = date.today()

    records = len(topics) * len(keys)

    if not gQuiet:
        pbar = ProgressBar(widgets=[Percentage(), Bar(), AdaptiveETA()], maxval=records).start()
    else:
        pbar = None
    
    summary = WordMatrix(mc)
    processed = 0

    for t in topics:
        for c in keys:
            if pbar:
                pbar.update(processed)

            processed += 1
            tag = COLLECTIONS[c]

            notes = {
                "topic": t,
                "collection": c,
                "collection_id": tag,
                "wing": c
            }

            gLogger.info('Doing topic {topic} collection {tag}'.format(topic=t, tag=c))

            start = today - timedelta(180)

            # Todo: Add a language parameter if possible

            wm = WordMatrix(
                mc,
                mc.storyWordMatrix(
                    '+tags_id_media:{tag} AND language:{lang}'.format(tag=tag, lang=language),
                    solr_filter=[mc.publish_date_query(start, today)],
                    rows=rows),
                notes
            )

            summary += wm

    if pbar:
        pbar.finish()

    return summary

if __name__ == "__main__":
    # Command line interface

    from getopt import *

    # Settable parameters

    gRows = 20
    gOutput = sys.stdout
    gOutputFile = None
    gCompress = False
    gQuiet = False
    gTopics = []
    gBiases = []
    gLanguage = 'en'

    errflag = 0

    # Process command line arguments

    opts, args = getopt(
        sys.argv[1:],
        'b:hl:o:qt:vz?',
        ('bias', 'help', 'language', 'output', 'quiet', 'topic', 'verbose', 'compress')
    )

    for k, v in opts:
        if k in ('-b', '--bias'):
            if v in BIAS_ABBREV:
                v = BIAS_ABBREV[v]

            if v not in BIAS_VALUE:
                gLogger.error('Illegal bias value %s' % v)
                errflag += 1
                continue
            gBiases.append(v)
        elif k in ('-o', '--output'):                        # Output file
            gOutputFile = v
        elif k in ('-q', '--quiet'):
            gQuiet = True
        elif k in ('-r', '--rows'):
            gRows = int(v)
        elif k in ('-t', '--topic'):
            gTopics.append(v)
        elif k in ('-v', '--verbose'):
            gLogger.setLevel(gLogger.getEffectiveLevel() - 10)
        elif k in ('-z', '--compress'):
            gCompress = True
        elif k in ('-h', '--help'):
            errflag += 1
        else:
            gLogger.error('Illegal option %s' % k)
            errflag += 1

    # Handle errors or -h.

    if gCompress and not gOutputFile:
        gLogger.error("Can't compress output without an output filename")
        errflag += 1

    if errflag:
        sys.stderr.write("""Usage: %s [-b bias] [-l lang] [-o file] [-t topic] [-q] [-v] [-z]
    -b bias   Use the given bias. May be repeated. Values include:
              - c or center
              - l or left
              - cl or center-left
              - cr or center-right
              - r or right
              If no value is given, all biases are assumed.
    -l lang	  Language to look for. Defaults to 'en'
    -o file   Write output to the specified file
    -t topic  List of topics to retrieve. May be repeated.
    -h        Print this message
    -q        Quiet output
    -v        Verbose output
    -z        Compress output with gzip
    """ % sys.argv[0])
        sys.exit(1)

    # Handle defaults and post-processing for command line arguments.

    if gOutputFile:
        if os.path.exists(gOutputFile):
            os.rename(gOutputFile, gOutputFile + '~')

        if gCompress:
            gOutput = gzip.open(gOutputFile, mode='wt', encoding='utf-8')
        else:
            gOutput = open(gOutputFile, mode='w', encoding='utf-8')

    if len(gBiases) == 0:
        # We put the keys in order of value (left to right). Not sure we
        # need to, but it's cheap, so no reason not to.

        gBiases = [tup[0] for tup in sorted(BIAS_VALUE.items(), key=lambda tup:tup[1])]

    if len(gTopics) == 0:
        gTopics = TOPICS

    mc = mediacloud.api.MediaCloud(MC_API_KEY)

    if not mc:
        gLogger.error('Failed to connect to MediaCloud')
        sys.exit(1)

    result = fetch_word_matrix(mc, gTopics, gBiases, gRows, gLanguage)

    json.dump(result, gOutput, indent=2, cls=WordMatrix)
